Index: b/main.c
===================================================================
--- a/main.c	2022-11-08 14:44:49.944296773 +0800
+++ b/main.c	2022-11-08 14:55:50.338093076 +0800
@@ -899,6 +899,7 @@ int main(int argc, char *argv[])
 	double started_at = -1;
 	char do_fetch_proxy_settings = 0;
 	char *hostname = NULL;
+	char *ifname = NULL;
 	char *proxy_host = NULL, *proxy_user = NULL, *proxy_password = NULL;
 	int proxy_port = 8080;
 	int portnr = 80;
@@ -1022,6 +1023,7 @@ int main(int argc, char *argv[])
 		{"nagios-mode-2",	1, NULL, 'n' },
 #endif
 		{"bind-to",	1, NULL, 'y' },
+		{"bind-to-interface",     1, NULL, 'O' },
 		{"quiet",	0, NULL, 'q' },
 		{"username",	1, NULL, 'U' },
 		{"password",	1, NULL, 'P' },
@@ -1097,7 +1099,7 @@ int main(int argc, char *argv[])
 
 	signal(SIGPIPE, SIG_IGN);
 
-	while((c = getopt_long(argc, argv, "DKEA5MvYWT:ZQ6Sy:XL:bBg:h:p:c:i:Gx:t:o:e:falqsmV?I:R:rn:N:zP:U:C:F", long_options, NULL)) != -1)
+	while((c = getopt_long(argc, argv, "DKEA5MvYWT:ZQ6SyO:XL:bBg:h:p:c:i:Gx:t:o:e:falqsmV?I:R:rn:N:zP:U:C:F", long_options, NULL)) != -1)
 	{
 		switch(c)
 		{
@@ -1271,6 +1273,10 @@ int main(int argc, char *argv[])
 				parse_bind_to(optarg, &bind_to_4, &bind_to_6, &bind_to);
 				break;
 
+			case 'O':
+				ifname = optarg;
+				break;
+
 			case 'z':
 				show_fp = 1;
 				break;
@@ -1761,7 +1767,7 @@ persistent_loop:
 				int rc = -1;
 				struct addrinfo *ai_dummy = proxy_host ? ai_use_proxy : ai_use;
 
-				fd = create_socket((struct sockaddr *)bind_to, ai_dummy, recv_buffer_size, tx_buffer_size, max_mtu, use_tcp_nodelay, priority, send_tos);
+				fd = create_socket((struct sockaddr *)bind_to, ai_dummy, recv_buffer_size, tx_buffer_size, max_mtu, use_tcp_nodelay, priority, send_tos, ifname);
 				if (fd < 0)
 					rc = fd; /* FIXME need to fix this, this is ugly */
 				else if (proxy_host)
Index: b/tcp.c
===================================================================
--- a/tcp.c	2016-09-12 15:45:50.000000000 +0800
+++ b/tcp.c	2022-11-08 14:50:48.598186803 +0800
@@ -5,6 +5,7 @@
 #include <sys/socket.h>
 #include <netinet/in.h>
 #include <netinet/tcp.h>
+#include <net/if.h>
 #include <arpa/inet.h>
 #include <libintl.h>
 #include <netdb.h>
@@ -45,7 +46,7 @@ int set_no_delay(int fd)
 	return 0;
 }
 
-int create_socket(struct sockaddr *bind_to, struct addrinfo *ai, int recv_buffer_size, int tx_buffer_size, int max_mtu, char use_no_delay, int priority, int tos)
+int create_socket(struct sockaddr *bind_to, struct addrinfo *ai, int recv_buffer_size, int tx_buffer_size, int max_mtu, char use_no_delay, int priority, int tos, char *ifname)
 {
 	int fd = -1;
 
@@ -76,6 +77,18 @@ int create_socket(struct sockaddr *bind_
 			close(fd);
 			return RC_INVAL;
 		}
+	}
+
+	if (ifname != NULL && strlen(ifname) > 0)
+	{
+		struct ifreq ifr;
+		strncpy(ifr.ifr_name, ifname, IFNAMSIZ);
+		if (setsockopt(fd, SOL_SOCKET, SO_BINDTODEVICE, (char *)&ifr, sizeof ifr) == -1)
+		{
+			set_error(gettext("error can't bind to interface %s"), strerror(errno));
+			close(fd);
+			return RC_INVAL;
+		}
 	}
 
 	if (max_mtu >= 0)
Index: b/tcp.h
===================================================================
--- a/tcp.h	2016-09-12 15:45:50.000000000 +0800
+++ b/tcp.h	2022-11-08 14:49:04.117700822 +0800
@@ -1,5 +1,5 @@
 /* Released under AGPL v3 with exception for the OpenSSL library. See license.txt */
 
-int create_socket(struct sockaddr *bind_to, struct addrinfo *ai, int recv_buffer_size, int tx_buffer_size, int max_mtu, char use_no_delay, int priority, int tos);
+int create_socket(struct sockaddr *bind_to, struct addrinfo *ai, int recv_buffer_size, int tx_buffer_size, int max_mtu, char use_no_delay, int priority, int tos, char *ifname);
 int connect_to(int fd, struct addrinfo *ai, double timeout, char *tfo, char *msg, int msg_len, char *msg_accepted);
 void failure_close(int fd);
